//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_TransformModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Spine.TransformMode));
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("OnlyTranslation", get_OnlyTranslation, null);
		L.RegVar("NoRotationOrReflection", get_NoRotationOrReflection, null);
		L.RegVar("NoScale", get_NoScale, null);
		L.RegVar("NoScaleOrReflection", get_NoScaleOrReflection, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Spine.TransformMode>.Check = CheckType;
		StackTraits<Spine.TransformMode>.Push = Push;
	}

	static void Push(IntPtr L, Spine.TransformMode arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Spine.TransformMode), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, Spine.TransformMode.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnlyTranslation(IntPtr L)
	{
		ToLua.Push(L, Spine.TransformMode.OnlyTranslation);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoRotationOrReflection(IntPtr L)
	{
		ToLua.Push(L, Spine.TransformMode.NoRotationOrReflection);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoScale(IntPtr L)
	{
		ToLua.Push(L, Spine.TransformMode.NoScale);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoScaleOrReflection(IntPtr L)
	{
		ToLua.Push(L, Spine.TransformMode.NoScaleOrReflection);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Spine.TransformMode o = (Spine.TransformMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

