//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_CurveTimelineWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.CurveTimeline), typeof(System.Object));
		L.RegFunction("Apply", Apply);
		L.RegFunction("SetLinear", SetLinear);
		L.RegFunction("SetStepped", SetStepped);
		L.RegFunction("GetCurveType", GetCurveType);
		L.RegFunction("SetCurve", SetCurve);
		L.RegFunction("GetCurvePercent", GetCurvePercent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("FrameCount", get_FrameCount, null);
		L.RegVar("PropertyId", get_PropertyId, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			Spine.Skeleton arg0 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			Spine.ExposedList<Spine.Event> arg3 = (Spine.ExposedList<Spine.Event>)ToLua.CheckObject<Spine.ExposedList<Spine.Event>>(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			Spine.MixBlend arg5 = (Spine.MixBlend)ToLua.CheckObject(L, 7, typeof(Spine.MixBlend));
			Spine.MixDirection arg6 = (Spine.MixDirection)ToLua.CheckObject(L, 8, typeof(Spine.MixDirection));
			obj.Apply(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLinear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetLinear(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStepped(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetStepped(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurveType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float o = obj.GetCurveType(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			obj.SetCurve(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurvePercent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)ToLua.CheckObject<Spine.CurveTimeline>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float o = obj.GetCurvePercent(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)o;
			int ret = obj.FrameCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FrameCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.CurveTimeline obj = (Spine.CurveTimeline)o;
			int ret = obj.PropertyId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PropertyId on a nil value");
		}
	}
}

