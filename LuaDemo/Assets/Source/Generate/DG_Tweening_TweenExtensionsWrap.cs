//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DG_Tweening_TweenExtensionsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("TweenExtensions");
		L.RegFunction("Complete", Complete);
		L.RegFunction("Flip", Flip);
		L.RegFunction("ForceInit", ForceInit);
		L.RegFunction("Goto", Goto);
		L.RegFunction("GotoWithCallbacks", GotoWithCallbacks);
		L.RegFunction("Kill", Kill);
		L.RegFunction("ManualUpdate", ManualUpdate);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Play", Play);
		L.RegFunction("PlayBackwards", PlayBackwards);
		L.RegFunction("PlayForward", PlayForward);
		L.RegFunction("Restart", Restart);
		L.RegFunction("Rewind", Rewind);
		L.RegFunction("SmoothRewind", SmoothRewind);
		L.RegFunction("TogglePause", TogglePause);
		L.RegFunction("GotoWaypoint", GotoWaypoint);
		L.RegFunction("WaitForCompletion", WaitForCompletion);
		L.RegFunction("WaitForRewind", WaitForRewind);
		L.RegFunction("WaitForKill", WaitForKill);
		L.RegFunction("WaitForElapsedLoops", WaitForElapsedLoops);
		L.RegFunction("WaitForPosition", WaitForPosition);
		L.RegFunction("WaitForStart", WaitForStart);
		L.RegFunction("CompletedLoops", CompletedLoops);
		L.RegFunction("Delay", Delay);
		L.RegFunction("ElapsedDelay", ElapsedDelay);
		L.RegFunction("Duration", Duration);
		L.RegFunction("Elapsed", Elapsed);
		L.RegFunction("ElapsedPercentage", ElapsedPercentage);
		L.RegFunction("ElapsedDirectionalPercentage", ElapsedDirectionalPercentage);
		L.RegFunction("IsActive", IsActive);
		L.RegFunction("IsBackwards", IsBackwards);
		L.RegFunction("IsComplete", IsComplete);
		L.RegFunction("IsInitialized", IsInitialized);
		L.RegFunction("IsPlaying", IsPlaying);
		L.RegFunction("Loops", Loops);
		L.RegFunction("PathGetPoint", PathGetPoint);
		L.RegFunction("PathGetDrawPoints", PathGetDrawPoints);
		L.RegFunction("PathLength", PathLength);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Complete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				DG.Tweening.TweenExtensions.Complete(arg0);
				return 0;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				DG.Tweening.TweenExtensions.Complete(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Complete");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.Flip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.ForceInit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Goto(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				DG.Tweening.TweenExtensions.Goto(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				DG.Tweening.TweenExtensions.Goto(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Goto");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GotoWithCallbacks(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				DG.Tweening.TweenExtensions.GotoWithCallbacks(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				DG.Tweening.TweenExtensions.GotoWithCallbacks(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.GotoWithCallbacks");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Kill(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				DG.Tweening.TweenExtensions.Kill(arg0);
				return 0;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				DG.Tweening.TweenExtensions.Kill(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Kill");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ManualUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			DG.Tweening.TweenExtensions.ManualUpdate(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.Tween o = DG.Tweening.TweenExtensions.Pause(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.Tween o = DG.Tweening.TweenExtensions.Play(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBackwards(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.PlayBackwards(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayForward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.PlayForward(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restart(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				DG.Tweening.TweenExtensions.Restart(arg0);
				return 0;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				DG.Tweening.TweenExtensions.Restart(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				DG.Tweening.TweenExtensions.Restart(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Restart");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rewind(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				DG.Tweening.TweenExtensions.Rewind(arg0);
				return 0;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				DG.Tweening.TweenExtensions.Rewind(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Rewind");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothRewind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.SmoothRewind(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TogglePause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			DG.Tweening.TweenExtensions.TogglePause(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GotoWaypoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				DG.Tweening.TweenExtensions.GotoWaypoint(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				DG.Tweening.TweenExtensions.GotoWaypoint(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.GotoWaypoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForCompletion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			UnityEngine.YieldInstruction o = DG.Tweening.TweenExtensions.WaitForCompletion(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForRewind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			UnityEngine.YieldInstruction o = DG.Tweening.TweenExtensions.WaitForRewind(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForKill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			UnityEngine.YieldInstruction o = DG.Tweening.TweenExtensions.WaitForKill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForElapsedLoops(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.YieldInstruction o = DG.Tweening.TweenExtensions.WaitForElapsedLoops(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.YieldInstruction o = DG.Tweening.TweenExtensions.WaitForPosition(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			UnityEngine.Coroutine o = DG.Tweening.TweenExtensions.WaitForStart(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompletedLoops(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			int o = DG.Tweening.TweenExtensions.CompletedLoops(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Delay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float o = DG.Tweening.TweenExtensions.Delay(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ElapsedDelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float o = DG.Tweening.TweenExtensions.ElapsedDelay(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Duration(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float o = DG.Tweening.TweenExtensions.Duration(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				float o = DG.Tweening.TweenExtensions.Duration(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Duration");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Elapsed(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float o = DG.Tweening.TweenExtensions.Elapsed(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				float o = DG.Tweening.TweenExtensions.Elapsed(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.Elapsed");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ElapsedPercentage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				float o = DG.Tweening.TweenExtensions.ElapsedPercentage(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				float o = DG.Tweening.TweenExtensions.ElapsedPercentage(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.ElapsedPercentage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ElapsedDirectionalPercentage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float o = DG.Tweening.TweenExtensions.ElapsedDirectionalPercentage(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsActive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			bool o = DG.Tweening.TweenExtensions.IsActive(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBackwards(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			bool o = DG.Tweening.TweenExtensions.IsBackwards(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			bool o = DG.Tweening.TweenExtensions.IsComplete(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInitialized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			bool o = DG.Tweening.TweenExtensions.IsInitialized(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPlaying(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			bool o = DG.Tweening.TweenExtensions.IsPlaying(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Loops(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			int o = DG.Tweening.TweenExtensions.Loops(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PathGetPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 o = DG.Tweening.TweenExtensions.PathGetPoint(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PathGetDrawPoints(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				UnityEngine.Vector3[] o = DG.Tweening.TweenExtensions.PathGetDrawPoints(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3[] o = DG.Tweening.TweenExtensions.PathGetDrawPoints(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DG.Tweening.TweenExtensions.PathGetDrawPoints");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PathLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DG.Tweening.Tween arg0 = (DG.Tweening.Tween)ToLua.CheckObject<DG.Tweening.Tween>(L, 1);
			float o = DG.Tweening.TweenExtensions.PathLength(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

