//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_AtlasAttachmentLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.AtlasAttachmentLoader), typeof(System.Object));
		L.RegFunction("NewRegionAttachment", NewRegionAttachment);
		L.RegFunction("NewMeshAttachment", NewMeshAttachment);
		L.RegFunction("NewBoundingBoxAttachment", NewBoundingBoxAttachment);
		L.RegFunction("NewPathAttachment", NewPathAttachment);
		L.RegFunction("NewPointAttachment", NewPointAttachment);
		L.RegFunction("NewClippingAttachment", NewClippingAttachment);
		L.RegFunction("FindRegion", FindRegion);
		L.RegFunction("New", _CreateSpine_AtlasAttachmentLoader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_AtlasAttachmentLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckParamsType<Spine.Atlas>(L, 1, count))
			{
				Spine.Atlas[] arg0 = ToLua.ToParamsObject<Spine.Atlas>(L, 1, count);
				Spine.AtlasAttachmentLoader obj = new Spine.AtlasAttachmentLoader(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.AtlasAttachmentLoader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewRegionAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			Spine.RegionAttachment o = obj.NewRegionAttachment(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewMeshAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			Spine.MeshAttachment o = obj.NewMeshAttachment(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewBoundingBoxAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			Spine.BoundingBoxAttachment o = obj.NewBoundingBoxAttachment(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewPathAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			Spine.PathAttachment o = obj.NewPathAttachment(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewPointAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			Spine.PointAttachment o = obj.NewPointAttachment(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewClippingAttachment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			Spine.Skin arg0 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			Spine.ClippingAttachment o = obj.NewClippingAttachment(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindRegion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.AtlasAttachmentLoader obj = (Spine.AtlasAttachmentLoader)ToLua.CheckObject<Spine.AtlasAttachmentLoader>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Spine.AtlasRegion o = obj.FindRegion(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

