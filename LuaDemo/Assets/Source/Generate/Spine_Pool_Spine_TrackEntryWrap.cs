//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_Pool_Spine_TrackEntryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Pool<Spine.TrackEntry>), typeof(System.Object), "Pool_Spine_TrackEntry");
		L.RegFunction("Obtain", Obtain);
		L.RegFunction("Free", Free);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateSpine_Pool_Spine_TrackEntry);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("max", get_max, null);
		L.RegVar("Count", get_Count, null);
		L.RegVar("Peak", get_Peak, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_Pool_Spine_TrackEntry(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Spine.Pool<Spine.TrackEntry> obj = new Spine.Pool<Spine.TrackEntry>();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				Spine.Pool<Spine.TrackEntry> obj = new Spine.Pool<Spine.TrackEntry>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				Spine.Pool<Spine.TrackEntry> obj = new Spine.Pool<Spine.TrackEntry>(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.Pool<Spine.TrackEntry>.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Obtain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)ToLua.CheckObject<Spine.Pool<Spine.TrackEntry>>(L, 1);
			Spine.TrackEntry o = obj.Obtain();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Free(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)ToLua.CheckObject<Spine.Pool<Spine.TrackEntry>>(L, 1);
			Spine.TrackEntry arg0 = (Spine.TrackEntry)ToLua.CheckObject<Spine.TrackEntry>(L, 2);
			obj.Free(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)ToLua.CheckObject<Spine.Pool<Spine.TrackEntry>>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_max(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)o;
			int ret = obj.max;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index max on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Peak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Pool<Spine.TrackEntry> obj = (Spine.Pool<Spine.TrackEntry>)o;
			int ret = obj.Peak;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Peak on a nil value");
		}
	}
}

