//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_Unity_MeshGeneratorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Unity.MeshGenerator), typeof(System.Object));
		L.RegFunction("GenerateSingleSubmeshInstruction", GenerateSingleSubmeshInstruction);
		L.RegFunction("GenerateSkeletonRendererInstruction", GenerateSkeletonRendererInstruction);
		L.RegFunction("TryReplaceMaterials", TryReplaceMaterials);
		L.RegFunction("Begin", Begin);
		L.RegFunction("AddSubmesh", AddSubmesh);
		L.RegFunction("BuildMesh", BuildMesh);
		L.RegFunction("BuildMeshWithArrays", BuildMeshWithArrays);
		L.RegFunction("ScaleVertexData", ScaleVertexData);
		L.RegFunction("FillVertexData", FillVertexData);
		L.RegFunction("FillLateVertexData", FillLateVertexData);
		L.RegFunction("FillTriangles", FillTriangles);
		L.RegFunction("FillTrianglesSingle", FillTrianglesSingle);
		L.RegFunction("EnsureVertexCapacity", EnsureVertexCapacity);
		L.RegFunction("TrimExcess", TrimExcess);
		L.RegFunction("FillMeshLocal", FillMeshLocal);
		L.RegFunction("New", _CreateSpine_Unity_MeshGenerator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("settings", get_settings, set_settings);
		L.RegVar("VertexCount", get_VertexCount, null);
		L.RegVar("Buffers", get_Buffers, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_Unity_MeshGenerator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Spine.Unity.MeshGenerator obj = new Spine.Unity.MeshGenerator();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.Unity.MeshGenerator.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateSingleSubmeshInstruction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.Unity.SkeletonRendererInstruction arg0 = (Spine.Unity.SkeletonRendererInstruction)ToLua.CheckObject<Spine.Unity.SkeletonRendererInstruction>(L, 1);
			Spine.Skeleton arg1 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
			UnityEngine.Material arg2 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
			Spine.Unity.MeshGenerator.GenerateSingleSubmeshInstruction(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateSkeletonRendererInstruction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				Spine.Unity.SkeletonRendererInstruction arg0 = (Spine.Unity.SkeletonRendererInstruction)ToLua.CheckObject<Spine.Unity.SkeletonRendererInstruction>(L, 1);
				Spine.Skeleton arg1 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
				System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material> arg2 = (System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material>));
				System.Collections.Generic.List<Spine.Slot> arg3 = (System.Collections.Generic.List<Spine.Slot>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<Spine.Slot>));
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				Spine.Unity.MeshGenerator.GenerateSkeletonRendererInstruction(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6)
			{
				Spine.Unity.SkeletonRendererInstruction arg0 = (Spine.Unity.SkeletonRendererInstruction)ToLua.CheckObject<Spine.Unity.SkeletonRendererInstruction>(L, 1);
				Spine.Skeleton arg1 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
				System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material> arg2 = (System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.Dictionary<Spine.Slot,UnityEngine.Material>));
				System.Collections.Generic.List<Spine.Slot> arg3 = (System.Collections.Generic.List<Spine.Slot>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<Spine.Slot>));
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
				Spine.Unity.MeshGenerator.GenerateSkeletonRendererInstruction(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Unity.MeshGenerator.GenerateSkeletonRendererInstruction");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryReplaceMaterials(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.Unity.SubmeshInstruction> arg0 = (Spine.ExposedList<Spine.Unity.SubmeshInstruction>)ToLua.CheckObject<Spine.ExposedList<Spine.Unity.SubmeshInstruction>>(L, 1);
			System.Collections.Generic.Dictionary<UnityEngine.Material,UnityEngine.Material> arg1 = (System.Collections.Generic.Dictionary<UnityEngine.Material,UnityEngine.Material>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<UnityEngine.Material,UnityEngine.Material>));
			Spine.Unity.MeshGenerator.TryReplaceMaterials(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Begin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			obj.Begin();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSubmesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				Spine.Unity.SubmeshInstruction arg0 = StackTraits<Spine.Unity.SubmeshInstruction>.Check(L, 2);
				obj.AddSubmesh(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				Spine.Unity.SubmeshInstruction arg0 = StackTraits<Spine.Unity.SubmeshInstruction>.Check(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.AddSubmesh(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Unity.MeshGenerator.AddSubmesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			Spine.Unity.SkeletonRendererInstruction arg0 = (Spine.Unity.SkeletonRendererInstruction)ToLua.CheckObject<Spine.Unity.SkeletonRendererInstruction>(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.BuildMesh(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildMeshWithArrays(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			Spine.Unity.SkeletonRendererInstruction arg0 = (Spine.Unity.SkeletonRendererInstruction)ToLua.CheckObject<Spine.Unity.SkeletonRendererInstruction>(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.BuildMeshWithArrays(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScaleVertexData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ScaleVertexData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillVertexData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.Mesh));
			obj.FillVertexData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillLateVertexData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.Mesh));
			obj.FillLateVertexData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillTriangles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.Mesh));
			obj.FillTriangles(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillTrianglesSingle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.Mesh));
			obj.FillTrianglesSingle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureVertexCapacity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.EnsureVertexCapacity(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.EnsureVertexCapacity(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.EnsureVertexCapacity(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.EnsureVertexCapacity(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Unity.MeshGenerator.EnsureVertexCapacity");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrimExcess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)ToLua.CheckObject<Spine.Unity.MeshGenerator>(L, 1);
			obj.TrimExcess();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FillMeshLocal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 1, typeof(UnityEngine.Mesh));
				Spine.RegionAttachment arg1 = (Spine.RegionAttachment)ToLua.CheckObject<Spine.RegionAttachment>(L, 2);
				Spine.Unity.MeshGenerator.FillMeshLocal(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 1, typeof(UnityEngine.Mesh));
				Spine.MeshAttachment arg1 = (Spine.MeshAttachment)ToLua.CheckObject<Spine.MeshAttachment>(L, 2);
				Spine.SkeletonData arg2 = (Spine.SkeletonData)ToLua.CheckObject<Spine.SkeletonData>(L, 3);
				Spine.Unity.MeshGenerator.FillMeshLocal(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Unity.MeshGenerator.FillMeshLocal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_settings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)o;
			Spine.Unity.MeshGenerator.Settings ret = obj.settings;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index settings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VertexCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)o;
			int ret = obj.VertexCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VertexCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Buffers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)o;
			Spine.Unity.MeshGeneratorBuffers ret = obj.Buffers;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Buffers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_settings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.MeshGenerator obj = (Spine.Unity.MeshGenerator)o;
			Spine.Unity.MeshGenerator.Settings arg0 = StackTraits<Spine.Unity.MeshGenerator.Settings>.Check(L, 2);
			obj.settings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index settings on a nil value");
		}
	}
}

