//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_Unity_SpineAttachmentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Unity.SpineAttachment), typeof(Spine.Unity.SpineAttributeBase));
		L.RegFunction("GetHierarchy", GetHierarchy);
		L.RegFunction("GetAttachment", GetAttachment);
		L.RegFunction("New", _CreateSpine_Unity_SpineAttachment);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("returnAttachmentPath", get_returnAttachmentPath, set_returnAttachmentPath);
		L.RegVar("currentSkinOnly", get_currentSkinOnly, set_currentSkinOnly);
		L.RegVar("placeholdersOnly", get_placeholdersOnly, set_placeholdersOnly);
		L.RegVar("skinField", get_skinField, set_skinField);
		L.RegVar("slotField", get_slotField, set_slotField);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_Unity_SpineAttachment(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				string arg5 = ToLua.CheckString(L, 6);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 7)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				string arg5 = ToLua.CheckString(L, 6);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 7);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 8)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				string arg5 = ToLua.CheckString(L, 6);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 7);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
				Spine.Unity.SpineAttachment obj = new Spine.Unity.SpineAttachment(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.Unity.SpineAttachment.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHierarchy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Spine.Unity.SpineAttachment.Hierarchy o = Spine.Unity.SpineAttachment.GetHierarchy(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttachment(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Spine.SkeletonData>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				Spine.SkeletonData arg1 = (Spine.SkeletonData)ToLua.ToObject(L, 2);
				Spine.Attachment o = Spine.Unity.SpineAttachment.GetAttachment(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Spine.Unity.SkeletonDataAsset>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				Spine.Unity.SkeletonDataAsset arg1 = (Spine.Unity.SkeletonDataAsset)ToLua.ToObject(L, 2);
				Spine.Attachment o = Spine.Unity.SpineAttachment.GetAttachment(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.Unity.SpineAttachment.GetAttachment");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_returnAttachmentPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool ret = obj.returnAttachmentPath;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index returnAttachmentPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentSkinOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool ret = obj.currentSkinOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentSkinOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_placeholdersOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool ret = obj.placeholdersOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index placeholdersOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skinField(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			string ret = obj.skinField;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skinField on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_slotField(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			string ret = obj.slotField;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index slotField on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_returnAttachmentPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.returnAttachmentPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index returnAttachmentPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentSkinOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.currentSkinOnly = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentSkinOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_placeholdersOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.placeholdersOnly = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index placeholdersOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skinField(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.skinField = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skinField on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_slotField(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.SpineAttachment obj = (Spine.Unity.SpineAttachment)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.slotField = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index slotField on a nil value");
		}
	}
}

