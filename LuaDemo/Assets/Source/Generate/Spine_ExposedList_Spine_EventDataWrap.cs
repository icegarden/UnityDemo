//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_ExposedList_Spine_EventDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.ExposedList<Spine.EventData>), typeof(System.Object), "ExposedList_Spine_EventData");
		L.RegFunction("Add", Add);
		L.RegFunction("GrowIfNeeded", GrowIfNeeded);
		L.RegFunction("Resize", Resize);
		L.RegFunction("EnsureCapacity", EnsureCapacity);
		L.RegFunction("AddRange", AddRange);
		L.RegFunction("BinarySearch", BinarySearch);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Contains", Contains);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("Exists", Exists);
		L.RegFunction("Find", Find);
		L.RegFunction("FindAll", FindAll);
		L.RegFunction("FindIndex", FindIndex);
		L.RegFunction("FindLast", FindLast);
		L.RegFunction("FindLastIndex", FindLastIndex);
		L.RegFunction("ForEach", ForEach);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("GetRange", GetRange);
		L.RegFunction("IndexOf", IndexOf);
		L.RegFunction("Insert", Insert);
		L.RegFunction("InsertRange", InsertRange);
		L.RegFunction("LastIndexOf", LastIndexOf);
		L.RegFunction("Remove", Remove);
		L.RegFunction("RemoveAll", RemoveAll);
		L.RegFunction("RemoveAt", RemoveAt);
		L.RegFunction("Pop", Pop);
		L.RegFunction("RemoveRange", RemoveRange);
		L.RegFunction("Reverse", Reverse);
		L.RegFunction("Sort", Sort);
		L.RegFunction("ToArray", ToArray);
		L.RegFunction("TrimExcess", TrimExcess);
		L.RegFunction("TrueForAll", TrueForAll);
		L.RegFunction("New", _CreateSpine_ExposedList_Spine_EventData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Items", get_Items, set_Items);
		L.RegVar("Count", get_Count, set_Count);
		L.RegVar("Capacity", get_Capacity, set_Capacity);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_ExposedList_Spine_EventData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Spine.ExposedList<Spine.EventData> obj = new Spine.ExposedList<Spine.EventData>();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				Spine.ExposedList<Spine.EventData> obj = new Spine.ExposedList<Spine.EventData>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.IEnumerable<Spine.EventData>>(L, 1))
			{
				System.Collections.Generic.IEnumerable<Spine.EventData> arg0 = (System.Collections.Generic.IEnumerable<Spine.EventData>)ToLua.ToObject(L, 1);
				Spine.ExposedList<Spine.EventData> obj = new Spine.ExposedList<Spine.EventData>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.ExposedList<Spine.EventData>.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GrowIfNeeded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.GrowIfNeeded(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Spine.ExposedList<Spine.EventData> o = obj.Resize(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureCapacity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnsureCapacity(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Collections.Generic.IEnumerable<Spine.EventData> arg0 = (System.Collections.Generic.IEnumerable<Spine.EventData>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<Spine.EventData>>(L, 2);
			obj.AddRange(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BinarySearch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int o = obj.BinarySearch(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				System.Collections.Generic.IComparer<Spine.EventData> arg1 = (System.Collections.Generic.IComparer<Spine.EventData>)ToLua.CheckObject<System.Collections.Generic.IComparer<Spine.EventData>>(L, 3);
				int o = obj.BinarySearch(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				Spine.EventData arg2 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 4);
				System.Collections.Generic.IComparer<Spine.EventData> arg3 = (System.Collections.Generic.IComparer<Spine.EventData>)ToLua.CheckObject<System.Collections.Generic.IComparer<Spine.EventData>>(L, 5);
				int o = obj.BinarySearch(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.BinarySearch");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				obj.Clear();
				return 0;
			}
			else if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Clear(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.Clear");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData[] arg0 = ToLua.CheckObjectArray<Spine.EventData>(L, 2);
				obj.CopyTo(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData[] arg0 = ToLua.CheckObjectArray<Spine.EventData>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.CopyTo(arg0, arg1);
				return 0;
			}
			else if (count == 5)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				Spine.EventData[] arg1 = ToLua.CheckObjectArray<Spine.EventData>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.CopyTo(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.CopyTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exists(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			bool o = obj.Exists(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Find(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			Spine.EventData o = obj.Find(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			Spine.ExposedList<Spine.EventData> o = obj.FindAll(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindIndex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
				int o = obj.FindIndex(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Predicate<Spine.EventData> arg1 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 3);
				int o = obj.FindIndex(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Predicate<Spine.EventData> arg2 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 4);
				int o = obj.FindIndex(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.FindIndex");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindLast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			Spine.EventData o = obj.FindLast(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindLastIndex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
				int o = obj.FindLastIndex(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Predicate<Spine.EventData> arg1 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 3);
				int o = obj.FindLastIndex(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Predicate<Spine.EventData> arg2 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 4);
				int o = obj.FindLastIndex(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.FindLastIndex");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForEach(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Action<Spine.EventData> arg0 = (System.Action<Spine.EventData>)ToLua.CheckDelegate<System.Action<Spine.EventData>>(L, 2);
			obj.ForEach(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.ExposedList<Spine.EventData>.Enumerator o = obj.GetEnumerator();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			Spine.ExposedList<Spine.EventData> o = obj.GetRange(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexOf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int o = obj.IndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.IndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.IndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.IndexOf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Insert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Spine.EventData arg1 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 3);
			obj.Insert(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.IEnumerable<Spine.EventData> arg1 = (System.Collections.Generic.IEnumerable<Spine.EventData>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<Spine.EventData>>(L, 3);
			obj.InsertRange(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LastIndexOf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int o = obj.LastIndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.LastIndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.LastIndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.LastIndexOf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.EventData arg0 = (Spine.EventData)ToLua.CheckObject<Spine.EventData>(L, 2);
			bool o = obj.Remove(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			int o = obj.RemoveAll(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveAt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.EventData o = obj.Pop();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.RemoveRange(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reverse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				obj.Reverse();
				return 0;
			}
			else if (count == 3)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.Reverse(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.Reverse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sort(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				obj.Sort();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.IComparer<Spine.EventData>>(L, 2))
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				System.Collections.Generic.IComparer<Spine.EventData> arg0 = (System.Collections.Generic.IComparer<Spine.EventData>)ToLua.ToObject(L, 2);
				obj.Sort(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Comparison<Spine.EventData>>(L, 2))
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				System.Comparison<Spine.EventData> arg0 = (System.Comparison<Spine.EventData>)ToLua.ToObject(L, 2);
				obj.Sort(arg0);
				return 0;
			}
			else if (count == 4)
			{
				Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Collections.Generic.IComparer<Spine.EventData> arg2 = (System.Collections.Generic.IComparer<Spine.EventData>)ToLua.CheckObject<System.Collections.Generic.IComparer<Spine.EventData>>(L, 4);
				obj.Sort(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.ExposedList<Spine.EventData>.Sort");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			Spine.EventData[] o = obj.ToArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrimExcess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			obj.TrimExcess();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrueForAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)ToLua.CheckObject<Spine.ExposedList<Spine.EventData>>(L, 1);
			System.Predicate<Spine.EventData> arg0 = (System.Predicate<Spine.EventData>)ToLua.CheckDelegate<System.Predicate<Spine.EventData>>(L, 2);
			bool o = obj.TrueForAll(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Items(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			Spine.EventData[] ret = obj.Items;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Items on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			int ret = obj.Capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Items(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			Spine.EventData[] arg0 = ToLua.CheckObjectArray<Spine.EventData>(L, 2);
			obj.Items = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Items on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Count = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.ExposedList<Spine.EventData> obj = (Spine.ExposedList<Spine.EventData>)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Capacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}
}

