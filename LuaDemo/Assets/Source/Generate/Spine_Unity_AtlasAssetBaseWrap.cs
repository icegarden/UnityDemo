//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_Unity_AtlasAssetBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Unity.AtlasAssetBase), typeof(UnityEngine.ScriptableObject));
		L.RegFunction("Clear", Clear);
		L.RegFunction("GetAtlas", GetAtlas);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("PrimaryMaterial", get_PrimaryMaterial, null);
		L.RegVar("Materials", get_Materials, null);
		L.RegVar("MaterialCount", get_MaterialCount, null);
		L.RegVar("IsLoaded", get_IsLoaded, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)ToLua.CheckObject<Spine.Unity.AtlasAssetBase>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)ToLua.CheckObject<Spine.Unity.AtlasAssetBase>(L, 1);
			Spine.Atlas o = obj.GetAtlas();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PrimaryMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)o;
			UnityEngine.Material ret = obj.PrimaryMaterial;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PrimaryMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Materials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)o;
			System.Collections.Generic.IEnumerable<UnityEngine.Material> ret = obj.Materials;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Materials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaterialCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)o;
			int ret = obj.MaterialCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaterialCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Unity.AtlasAssetBase obj = (Spine.Unity.AtlasAssetBase)o;
			bool ret = obj.IsLoaded;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLoaded on a nil value");
		}
	}
}

