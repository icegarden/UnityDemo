//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Collections_Generic_LinkedList_objectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Collections.Generic.LinkedList<object>), typeof(System.Object), "LinkedList_object");
		L.RegFunction("AddAfter", AddAfter);
		L.RegFunction("AddBefore", AddBefore);
		L.RegFunction("AddFirst", AddFirst);
		L.RegFunction("AddLast", AddLast);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Contains", Contains);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("Find", Find);
		L.RegFunction("FindLast", FindLast);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("Remove", Remove);
		L.RegFunction("RemoveFirst", RemoveFirst);
		L.RegFunction("RemoveLast", RemoveLast);
		L.RegFunction("GetObjectData", GetObjectData);
		L.RegFunction("OnDeserialization", OnDeserialization);
		L.RegFunction("New", _CreateSystem_Collections_Generic_LinkedList_object);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Count", get_Count, null);
		L.RegVar("First", get_First, null);
		L.RegVar("Last", get_Last, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Collections_Generic_LinkedList_object(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Collections.Generic.LinkedList<object> obj = new System.Collections.Generic.LinkedList<object>();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				System.Collections.Generic.IEnumerable<object> arg0 = (System.Collections.Generic.IEnumerable<object>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<object>>(L, 1);
				System.Collections.Generic.LinkedList<object> obj = new System.Collections.Generic.LinkedList<object>(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Collections.Generic.LinkedList<object>.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAfter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.LinkedListNode<object>>(L, 3))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.LinkedListNode<object>));
				System.Collections.Generic.LinkedListNode<object> arg1 = (System.Collections.Generic.LinkedListNode<object>)ToLua.ToObject(L, 3);
				obj.AddAfter(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object>(L, 3))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.LinkedListNode<object>));
				object arg1 = ToLua.ToVarObject(L, 3);
				System.Collections.Generic.LinkedListNode<object> o = obj.AddAfter(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Generic.LinkedList<object>.AddAfter");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBefore(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.LinkedListNode<object>>(L, 3))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.LinkedListNode<object>));
				System.Collections.Generic.LinkedListNode<object> arg1 = (System.Collections.Generic.LinkedListNode<object>)ToLua.ToObject(L, 3);
				obj.AddBefore(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object>(L, 3))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.LinkedListNode<object>));
				object arg1 = ToLua.ToVarObject(L, 3);
				System.Collections.Generic.LinkedListNode<object> o = obj.AddBefore(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Generic.LinkedList<object>.AddBefore");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFirst(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.LinkedListNode<object>>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.ToObject(L, 2);
				obj.AddFirst(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				System.Collections.Generic.LinkedListNode<object> o = obj.AddFirst(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Generic.LinkedList<object>.AddFirst");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.LinkedListNode<object>>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.ToObject(L, 2);
				obj.AddLast(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				System.Collections.Generic.LinkedListNode<object> o = obj.AddLast(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Generic.LinkedList<object>.AddLast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			object[] arg0 = ToLua.CheckObjectArray(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.CopyTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Find(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			System.Collections.Generic.LinkedListNode<object> o = obj.Find(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindLast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			System.Collections.Generic.LinkedListNode<object> o = obj.FindLast(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			System.Collections.Generic.LinkedList<object>.Enumerator o = obj.GetEnumerator();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.LinkedListNode<object>>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				System.Collections.Generic.LinkedListNode<object> arg0 = (System.Collections.Generic.LinkedListNode<object>)ToLua.ToObject(L, 2);
				obj.Remove(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj.Remove(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Collections.Generic.LinkedList<object>.Remove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFirst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			obj.RemoveFirst();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			obj.RemoveLast();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			System.Runtime.Serialization.SerializationInfo arg0 = (System.Runtime.Serialization.SerializationInfo)ToLua.CheckObject(L, 2, typeof(System.Runtime.Serialization.SerializationInfo));
			System.Runtime.Serialization.StreamingContext arg1 = StackTraits<System.Runtime.Serialization.StreamingContext>.Check(L, 3);
			obj.GetObjectData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeserialization(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)ToLua.CheckObject<System.Collections.Generic.LinkedList<object>>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnDeserialization(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_First(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)o;
			System.Collections.Generic.LinkedListNode<object> ret = obj.First;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index First on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Last(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Collections.Generic.LinkedList<object> obj = (System.Collections.Generic.LinkedList<object>)o;
			System.Collections.Generic.LinkedListNode<object> ret = obj.Last;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Last on a nil value");
		}
	}
}

